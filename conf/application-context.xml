<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	       
	<bean id="actionLookup" class="com.guanhuodata.framework.core.DefaultActionLookup"></bean>
	
	<bean id="serviceLocator" class="com.guanhuodata.framework.core.ServiceLocator"></bean>
	
	<bean id="licenseService" class="com.guanhuodata.license.license.LicenseServiceImpl"/>
	
	<bean id="loginInfo" class="com.guanhuodata.web.action.LoginInfoAction"></bean>
	
	<bean id="logout" class="com.guanhuodata.web.action.LogoutAction"></bean>
	
	<bean id="image" class="com.guanhuodata.web.action.ImageAction" ></bean>
	
	<bean id="forwardAction" class="com.guanhuodata.web.action.ForwardAction" ></bean>
	
	<bean id="excelAction" class="com.guanhuodata.excel.action.ExcelAction">
		<property name="chartService" ref="IChartService"></property>
	</bean>
	
	<bean id="IChartService" class="com.guanhuodata.excel.service.impl.IChartServiceImpl">
		<property name="chartDAO" ref="IChartDAO"></property>
	</bean>
	
	<bean id="IChartDAO" class="com.guanhuodata.excel.dao.impl.IChartDAOImpl"></bean>
	
	<bean id="photoMaterialAction" class="com.guanhuodata.photo.action.PhotoMaterialAction">
		<property name="materialService" ref="IMaterialService"></property>
	</bean>
	
	<bean id="IMaterialService" class="com.guanhuodata.photo.service.impl.IMaterialServiceImpl">
		<property name="materialDAO" ref="IMaterialDAO"></property>
	</bean>
	
	<bean id="IMaterialDAO" class="com.guanhuodata.photo.dao.impl.IMaterialDAOImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- jdbc config -->
	<bean id="propertyConfigure" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>jdbc.properties</value>
		</property>
	</bean>
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!-- 数据连接信息 -->
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="driverClass" value="${jdbc.driverClassName}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 其他配置 -->
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="3"></property>
		<!--连接池中保留的最小连接数。Default: 3 -->
		<property name="minPoolSize" value="3"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="5"></property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3"></property>
		<!-- 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="8"></property>
		<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
		<property name="maxStatementsPerConnection" value="5"></property>
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="1800"></property>
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 指定hibernate的配置文件位置 -->
		<property name="configLocation">
			<value>classpath:hibernate.cfg.xml</value>
		</property>
	</bean>
	
	<!-- <context:property-placeholder location="classpath:jdbc.properties" /> -->
	<!-- 配置SessionFactory -->
	<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		指定hibernate的配置文件位置
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		配置c3p0数据库连接池
		<property name="dataSource">
			<bean class="com.mchange.v2.c3p0.ComboPooledDataSource">
				数据连接信息
				<property name="jdbcUrl" value="${jdbc.url}"></property>
				<property name="driverClass" value="${jdbc.driverClassName}"></property>
				<property name="user" value="${jdbc.username}"></property>
				<property name="password" value="${jdbc.password}"></property>
				其他配置
				初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3
				<property name="initialPoolSize" value="3"></property>
				连接池中保留的最小连接数。Default: 3
				<property name="minPoolSize" value="3"></property>
				连接池中保留的最大连接数。Default: 15
				<property name="maxPoolSize" value="5"></property>
				当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3
				<property name="acquireIncrement" value="3"></property>
				控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0
				<property name="maxStatements" value="8"></property>
				maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0
				<property name="maxStatementsPerConnection" value="5"></property>
				最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0
				<property name="maxIdleTime" value="1800"></property>
			</bean>
		</property>
 </bean> -->

 <!-- 配置声明式事务管理（采用注解的方式） -->
 <bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
 	<property name="sessionFactory" ref="sessionFactory"></property>
 </bean>
 <tx:annotation-driven transaction-manager="txManager"/>
	
	
	<!-- <bean id="dataSource" class="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean">
		<property name="uniqueResourceName">
			<value>NONXADBMS</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="driverClassName">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="user">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="poolSize">
			<value>5</value>
		</property>
		<property name="borrowConnectionTimeout">
			<value>60</value>
		</property>
		<property name="testQuery">
			<value>select 1</value>
		</property>
	</bean> -->
	<!--<bean id="aaalogDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="url">
			<value>${aaalog.jdbc.url}</value>
		</property>
		<property name="driverClassName">
			<value>${aaalog.jdbc.driverClassName}</value>
		</property>
		<property name="username">
			<value>${aaalog.jdbc.username}</value>
		</property>
		<property name="password">
			<value>${aaalog.jdbc.password}</value>
		</property>
	</bean>
	
	<bean id="an_aaalogDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="url">
			<value>${an_aaalog.jdbc.url}</value>
		</property>
		<property name="driverClassName">
			<value>${an_aaalog.jdbc.driverClassName}</value>
		</property>
		<property name="username">
			<value>${an_aaalog.jdbc.username}</value>
		</property>
		<property name="password">
			<value>${an_aaalog.jdbc.password}</value>
		</property>
	</bean>
	JNDI 配置数据库 ，tt与solid配置只需要将 jndiName 的value值进行修改即可
	<bean  id="dataSource1" class="org.springframework.jndi.JndiObjectFactoryBean">
	    <property  name="jndiName" value="java:/comp/env/jdbc/timesten1" />
	</bean>
	<bean  id="dataSource2" class="org.springframework.jndi.JndiObjectFactoryBean">
	    <property  name="jndiName" value="java:/comp/env/jdbc/dataSource2" />
	</bean>
	<bean id="dBUtil" class="com.capitek.framework.util.DbUtil" init-method="init">
	</bean>
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<property name="forceShutdown">
			<value>true</value>
		</property>
	</bean>
	-->

	<!-- <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout">
			<value>300</value>
		</property>
	</bean> -->
	<!-- <bean id="springTransactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager">

		<property name="transactionManager">
			<ref bean="atomikosTransactionManager" />
		</property>
		<property name="userTransaction">
			<ref bean="atomikosUserTransaction" />
		</property>
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="sqlmapper/*.xml" />
	</bean>
	
	<bean id="sqlSessionFactory_aaalog" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="aaalogDataSource" />
		<property name="mapperLocations" value="sqlmapper/*.xml" />
	</bean>
	
	<bean id="sqlSessionFactory_an_aaalog" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="an_aaalogDataSource" />
		<property name="mapperLocations" value="sqlmapper/*.xml" />
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="springTransactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="del*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="stutdown*" propagation="REQUIRED"/>
			<tx:method name="startup*" propagation="REQUIRED"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice> -->
	
	<bean id="ctomsLogger" class="com.guanhuodata.framework.log.CtomsLoger">
		<!-- <property name="isActionLogger" value="${isActionLogger}"/>
		<property name="ctomsLogDao" ref="ctomsLogDao"/> -->
	</bean>

	<bean id="ctomsLogDao" class="com.guanhuodata.framework.log.loggerTool.CTOMSLogDAO">
		<!-- <property name="dataSource" ref="dataSource"/> -->
	</bean>
	<bean id="driverTypeUtil" class="com.guanhuodata.framework.util.DriverTypeUtil">
		<!-- <property name="filePath" value="${driverType.path}"/> -->
	</bean>
	<!-- add omclog  
	<aop:config>
		<aop:pointcut id="loggableCalls" 
			expression="execution(* com.capitek.*.*Service.*(..)) 			    
				and !execution(* com.capitek.*.*.*Service.*(..))"/>

		<aop:pointcut id="right" 
			expression="execution(*  com.capitek.*.*.*Manager.*(..)) and !execution(* com.capitek.*.*Manager.*(..))"/>
		 
		<aop:aspect id="logAspect" ref="ctomsLogger">
   			<aop:around pointcut-ref="loggableCalls" method="aroundLogCalls"/>
   			<aop:around pointcut-ref="right" method="aroundLogCalls"/>
  		</aop:aspect> 
	</aop:config>
	<bean id="ctomsLogger" class="com.capitek.framework.log.CtomsLoger">-->
		<!--   <property name="logManageService">
			<ref bean="logManageService"/>
		</property>
		<property name="omcRescDao">
			<ref bean="omcrescDao" />
		</property>
		<property name="roleDao">
			<ref bean="omcroleDao" />
		</property>	
	</bean>	-->
	
</beans>